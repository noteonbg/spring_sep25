1. how to understand controllers and write controllers.
2. unit testing.
3. security
4. checklist in terms of what you will do
1.1 dao layer what functions 
1.2 controller layer 
1.3 what could common properties.
1.3 batch processing.
1.4 profiles.. 
5. overall summary..


we will not know.. about some particular thing in jpa or something particular thing in controller...

when technical uncertainty can we write a small program to clarify our concept or syntax..


when program fails we want to know where it failed.. so logs will help us.. 


JPA.
what does J stand for..  Java... but then... guys who were maintaing this ran out of energy..
they handed it over boss of open source.. apache... apache changed name of the project
Java persistence api to Jakarta...

when i get a doubt what do i do.. here comes the interesting thing command line runner.

we have layers x, y,z,q, .. i have a doubt on z layer...

use command line runner, write z and try out all our problems on z. in the run method.

any kind of system will have incompetelness.. hence you can increase probability of results
but guarantee of results is surely not possible..





1. service function experiencing earth quakes , not a good time to write controller.
2. we know service, database part is working.. only then touch controller.
3  exiting project where a big poem has been written. i a have doubt on some particular part...
ok welcome to command line runner.
4. in the class wire what you have a doubt on...
5. in the run method use the wired object and write code to clarify your doubt.
6. once your doubt is clarified stop the run method from running how comment the implements
commandline  runner.


if a functon of class has been calle by spring and you did not create the object
it means spring has created the object.


Event..  Observer design pattern.

this is important to discuss controllers and what we saw in commandline runner also
was an event.

somebody ask explain about controller... These are all event handling functions.
database world.. trigger..

event handling functions are never wrappers


in controller functions we call service functions because that is intent...
intent is to make service function distributable and callable from different technologies.




Jargon REST API call.

1. http request for that uri in specifici http request mode.
2. because our function has registered for that event our function gets called.
3. our function needs input.. hence the caller must give the input..
4. this input has to in some standard.,. one standard is json..


by using controller functions
1. we have made our function distributed..

we have to collect data why our controller function did not work?


we will join back max by 4.00PM and then continue..

may be idea ...

1. to ensure jdk version
2. maven version
3. ide version
4. most important what to put pom.xml is not touched by every team member.
5. people focus on coding.











1. we will practice writing service, dao..
2. we will controller.
3. we try practice some unit test
4. security..


now also concepts will help..
if you think two tables.. what is first thing that should come to your mind?
foreign key..


JSON is a standard for representing data types
JWT is a standard for issuing tokens

issue a token based on username and password...

take this token you will know admin or user...


1. who is user, what is his password,that is company specific, we can get from database.... hundred
different places..

2. JWT.. standard for issuing tokens..
 you will use some libraries to create token..

token standard allows for  role to encoded as part of token.

3. in your controller functions you should decide which uri is accessed by which role.

4. all this information will be present in a package called config or security... in your project.



package a10jwt.. to run this.. you must security related in the pom.xml file.














